name: Run All Tests

on:
  workflow_dispatch:
    inputs:
      tag:
        required: true
        description: Digital Ocean tag
        default: "devops"
      network:
        required: true
        description: network name
        default: "devops"
      masterkey:
        description: masterkey of netmaker server
        default: "secretkey"

jobs:

  binary:
    name: build test binary
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: setup go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19
      - name: build binary
        run: |
          mkdir bin
          go build -o bin/test test/main.go
      - name: save binary
        uses: actions/cache/save@v3
        with:
          path: bin/test
          key: cache-${{ github.run_id }}-${{ github.run_attempt }}

  clean:
    needs: [binary]
    name: remove all gateways
    runs-on: ubuntu-latest
    steps:
      - name: get binary
        uses: actions/cache/restore@v3
        with:
          path: bin/test
          key: cache-${{ github.run_id }}-${{ github.run_attempt }}
      - name: run tests
        id: clean
        run: |
          chmod +x bin/test
          bin/test clean
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DO_TOKEN  }}
          TAG: ${{ github.event.inputs.tag }}
          NETWORK: ${{ github.event.inputs.network }}
          MASTERKEY: ${{ github.event.inputs.masterkey }}
          KEY: ${{ secrets.TESTING_SSH_KEY }}
      - name: save logs
        uses: actions/upload-artifact@v3
        with:
          name: clean.log
          path: /tmp/testing-clean.log
          retention-days: 3

  initial-ping:
    needs: [binary, clean]
    name: initial ping
    runs-on: ubuntu-latest
    steps:
      - name: get binary
        uses: actions/cache/restore@v3
        with:
          path: bin/test
          key: cache-${{ github.run_id }}-${{ github.run_attempt }}
      - name: run tests
        id: ping
        run: |
          chmod +x bin/test
          bin/test ping
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DO_TOKEN  }}
          TAG: ${{ github.event.inputs.tag }}
          NETWORK: ${{ github.event.inputs.network }}
          MASTERKEY: ${{ github.event.inputs.masterkey }}
          KEY: ${{ secrets.TESTING_SSH_KEY }}
      - name: save logs
        uses: actions/upload-artifact@v3
        with:
          name: ping.log
          path: /tmp/testing-ping.log
          retention-days: 3

  tests:
    needs: [binary, initial-ping, clean]
    name: tests
    runs-on: ubuntu-latest
    steps:
      - name: get binary
        uses: actions/cache/restore@v3
        with:
          path: bin/test
          key: cache-${{ github.run_id }}-${{ github.run_attempt }}
      - name: run tests
        id: test
        run: |
          chmod +x bin/test
          bin/test peerUpdate
          bin/test ingress
          bin/test egress
          bin/test relay
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DO_TOKEN  }}
          TAG: ${{ github.event.inputs.tag }}
          NETWORK: ${{ github.event.inputs.network }}
          MASTERKEY: ${{ github.event.inputs.masterkey }}
          KEY: ${{ secrets.TESTING_SSH_KEY }}
      - name: save logs
        uses: actions/upload-artifact@v3
        with:
          name: tests.log
          path: /tmp/testing-*.log
          retention-days: 3

  final-ping:
    needs: [binary, tests]
    name: final ping
    runs-on: ubuntu-latest
    steps:
      - name: get binary
        uses: actions/cache/restore@v3
        with:
          path: bin/test
          key: cache-${{ github.run_id }}-${{ github.run_attempt }}
      - name: run tests
        id: ping
        run: |
          chmod +x bin/test
          bin/test ping
        env:
          DIGITALOCEAN_TOKEN: ${{ secrets.DO_TOKEN  }}
          TAG: ${{ github.event.inputs.tag }}
          NETWORK: ${{ github.event.inputs.network }}
          MASTERKEY: ${{ github.event.inputs.masterkey }}
          KEY: ${{ secrets.TESTING_SSH_KEY }}
      - name: save logs
        uses: actions/upload-artifact@v3
        with:
          name: ping2.log
          path: /tmp/testing-ping.log
          retention-days: 3

  results:
    needs: [clean, initial-ping, tests, final-ping]
    name: sumarize results
    runs-on: ubuntu-latest
    steps:
      - name: get logs
        uses: actions/download-artifact@v3
        with:
          path: /tmp
      - name: generate results
        run: |
          grep ERROR /tmp/clean.log/testing-clean.log >> /tmp/errors.log
          if [ $? -eq 0 ]
          then
              echo "removing gateways: FAILED" >> /tmp/results.log
          else
              echo "removing gateways: PASSED" >> /tmp/results.log
          fi
          
          grep ERROR /tmp/ping.log/testing-ping.log >> /tmp/errors.log
          if [ $? -eq 0 ]
          then
              echo "initial ping: FAILED" >> /tmp/results.log
          else
              echo "initial ping: PASSED" >> /tmp/results.log
          fi
          
          grep ERROR /tmp/tests.log/testing-peerupdate.log >> /tmp/errors.log
          if [ $? -eq 0 ]
          then
              echo "peerupdate: FAILED" >> /tmp/results.log
          else
              echo "peerupdate: PASSED" >> /tmp/results.log
          fi
          
          grep ERROR /tmp/tests.log/testing-ingress.log >> /tmp/errors.log
          if [ $? -eq 0 ]
          then
              echo "ingress: FAILED" >> /tmp/results.log
          else
              echo "ingress: PASSED" >> /tmp/results.log
          fi
          
          grep ERROR /tmp/tests.log/testing-egress.log >> /tmp/errors.log
          if [ $? -eq 0 ]
          then
              echo "egress: FAILED" >> /tmp/results.log
          else
              echo "egress: PASSED" >> /tmp/results.log
          fi
          
          grep ERROR /tmp/tests.log/testing-relay.log >> /tmp/errors.log
          if [ $? -eq 0 ]
          then
              echo "relay: FAILED" >> /tmp/results.log
          else
              echo "relay: PASSED" >> /tmp/results.log
          fi
          
          grep ERROR /tmp/tests.log/testing-ping.log >> /tmp/errors.log
          if [ $? -eq 0 ]
          then
              echo "final ping: FAILED" >> /tmp/results.log
          else
              echo "final ping: PASSED" >> /tmp/results.log
          fi
          
          grep ERROR /tmp/errors.log
          if [ $? -eq 0 ]
          then
            finalresult=FAIL
          fi 
          echo $finalresult

      - name: upload results
        uses: actions/upload-artifact@v3
        with:
          name: results
          path: |
            /tmp/results.log
            /tmp/errors.log
          retention-days: 3
      - name: final result
        run: |
          if [ "$finalresult" == "FAIL" ]
          then
            exit 1
          fi

